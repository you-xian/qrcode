{"version":3,"sources":["component/header/style.tsx","component/header/index.tsx","component/header/component.tsx","style.tsx","app/qrcode.jpg","app/style.tsx","app/index.tsx","app/component.tsx","serviceWorker.ts","index.tsx"],"names":["style","makeStyles","theme","createStyles","icon","fontSize","margin","spacing","breakpoints","down","display","link","color","cursor","textDecoration","title","flexGrow","Header","classes","AppBar","position","Toolbar","Typography","variant","className","IconButton","createMuiTheme","palette","primary","blue","secondary","pink","GlobalStyle","createGlobalStyle","root","backgroundColor","image","marginTop","marginLeft","marginRight","width","App","ThemeProvider","src","qrcode","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNASaA,EAAQC,aAAW,SAACC,GAAD,OAC9BC,YAAa,CACXC,KAAK,aACHC,SAAU,GACVC,OAAQJ,EAAMK,QAAQ,IACrBL,EAAMM,YAAYC,KAAK,MAAQ,CAC9BC,QAAS,SAGbC,KAAM,CACJC,MAAO,UACPC,OAAQ,OACRC,eAAgB,WAElBC,MAAO,CACLC,SAAU,Q,OCtBDC,ECSU,WACvB,IAAMC,EAAUlB,IAEhB,OACE,cAACmB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWN,EAAQH,MAA5C,SACE,cAACU,EAAA,EAAD,CAAYb,MAAM,UAAlB,SAA4B,cAAC,IAAD,CAAUY,UAAWN,EAAQd,gB,wBCftDF,EAAQwB,YAAe,CAClCC,QAAS,CACPC,QAASC,IACTC,UAAWC,OCNA,MAA0B,mC,gBCM5BC,EAAcC,YAAH,saAeXjC,EAAQC,aAAW,kBAC9BE,YAAa,CACX+B,KAAM,CACJlB,SAAU,EACVmB,gBAAiB,eAEnBC,MAAO,CACL9B,OAAQ,OACRI,QAAS,QACT2B,UAAW,OACXC,WAAY,OACZC,YAAa,OACbC,MAAO,YC/BEC,ECOO,WACpB,IAAMvB,EAAUlB,IAChB,OACE,cAAC0C,EAAA,EAAD,CAAexC,MAAOA,EAAtB,SACE,sBAAKsB,UAAWN,EAAQgB,KAAxB,UACE,cAACF,EAAD,IACA,cAAC,EAAD,IACA,qBAAKW,IAAKC,EAAQpB,UAAWN,EAAQkB,MAAOS,IAAI,iBCJpCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5430f7b7.chunk.js","sourcesContent":["import {\n  createStyles,\n  makeStyles,\n// eslint-disable-next-line\n  Theme,\n} from \"@material-ui/core\";\n// eslint-disable-next-line\nimport React from \"react\";\n\nexport const style = makeStyles((theme: Theme) =>\n  createStyles({\n    icon: {\n      fontSize: 32,\n      margin: theme.spacing(1),\n      [theme.breakpoints.down(\"xs\")]: {\n        display: \"none\",\n      },\n    },\n    link: {\n      color: \"inherit\",\n      cursor: \"auto\",\n      textDecoration: \"inherit\",\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }),\n);\n","import Header from \"./component\";\n\nexport default Header;\n","import {\n  AppBar,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport React from \"react\";\n\nimport { style } from \"./style\";\n\nconst Header: React.FC = () => {\n  const classes = style();\n\n  return (\n    <AppBar position=\"static\" >\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          <IconButton color=\"inherit\"><HomeIcon className={classes.icon} /></IconButton>\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\nexport default Header;\n","import { createMuiTheme } from \"@material-ui/core\";\nimport { blue, pink } from \"@material-ui/core/colors\";\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: pink,\n  },\n});\n","export default __webpack_public_path__ + \"static/media/qrcode.0e0c5bbe.jpg\";","import {\n  createStyles,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n  }\n`;\n\nexport const style = makeStyles(() =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      backgroundColor: \"transparent\"\n    },\n    image: {\n      margin: \"auto\",\n      display: \"block\",\n      marginTop: \"24px\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      width: \"25%\"\n    }\n  }),\n);\n","import App from \"./component\";\n\nexport default App;\n","import { ThemeProvider } from \"@material-ui/styles\";\nimport React from \"react\";\n\n\nimport Header from \"../component/header\";\nimport { theme } from \"../style\";\nimport qrcode from \"./qrcode.jpg\";\nimport { GlobalStyle, style } from \"./style\";\n\nconst App: React.FC = () => {\n  const classes = style();\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <GlobalStyle />\n        <Header />\n        <img src={qrcode} className={classes.image} alt=\"qrcode\" />\n      </div>\n    </ThemeProvider>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  // eslint-disable-next-line\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  // eslint-disable-next-line\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}